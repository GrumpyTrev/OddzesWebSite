@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Home";
    Database db = Database.Open( "StarterSite" );
    IEnumerable<dynamic> users = db.Query( "SELECT * FROM UserProfile ORDER BY Email" );

    // Determine when the next few games are.
    IEnumerable<dynamic> games = db.Query( "SELECT * FROM Game WHERE Date >= @0 ORDER BY Date", DateTime.Now.Date );

    // Find the current fixtures
    dynamic currentFixtures = db.QuerySingle( "SELECT * FROM Documents WHERE Tag = 'Fixtures' " );

    // Get the last set of averages
    AverageDetails.Averages lastAverages = AverageDetails.Averages.PreviousAverages( db );

    // Get the name of league associated with these averages
    string averagesLeagueName = "";
    if ( lastAverages != null )
    {
        averagesLeagueName = ( string )db.QueryValue( "SELECT Name FROM Competition WHERE Id IN ( SELECT Competition FROM Game WHERE id=@0 )",
            lastAverages.AverageCollection[ 0 ].GameId );
    }
}

@functions
{
    //
    // String representation of a leg score
    //
    string GameDateString( DateTime gameDate, bool late )
    {
        int gameDay = gameDate.Day;

        return string.Format( "{0:ddd d}{1} {0:MMM yyyy} {2}", gameDate, ( ( ( gameDay % 10 == 1 ) && ( gameDay != 11 ) ) ? "st" :
                      ( ( gameDay % 10 == 2 ) && ( gameDay != 12 ) ) ? "nd" : ( ( gameDay % 10 == 3 ) && ( gameDay != 13 ) ) ? "rd" : "th" ),
                      ( late == false ? "Early" : "Late" ) );
    }
}

@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@Page.Title.</h1>
            </hgroup>
            <p>
                The Oddzes are a skittles team playing in the mens league at the
                <a href="http://www.consticlub.co.uk" title="Chippenham Constitutional Club Website">Chippenham Constitutional Club</a>.<br>
            </p>
        </div>
    </section>
}

<h3>Games</h3>
@if ( games.Count() > 0 )
{
   <table>
        @{  int nextGamesCount = 0;
            const int NextGamesLimit = 3;
            IEnumerator <dynamic> enumerator = games.GetEnumerator();
            while ( ( nextGamesCount < NextGamesLimit ) && ( enumerator.MoveNext() == true ) )
            {
                dynamic nextGame = enumerator.Current;
                dynamic nextGameLeague = db.QuerySingle( "SELECT * FROM Competition WHERE Id = @0", nextGame.Competition );

                <tr>
                    <td class="tdNoPad"><strong>@GameDateString( nextGame.Date, nextGame.Late )</strong></td>
                    <td class="tdNoPad">against <a href="@Href( "~/Game", nextGame.Id, nextGameLeague.Matchplay )">@nextGame.Opponents</a></td>
                    <td class="tdNoPad">in <a href="@Href( "~/Competition", nextGameLeague.Id, nextGameLeague.Name, nextGameLeague.Matchplay, nextGameLeague.Locked )">@nextGameLeague.Name</a></td>
                </tr>

                ++nextGamesCount;
            }
        }
    </table>
}
else
{
    <p>There are no games scheduled</p>
}

@if ( currentFixtures != null )
{
    <p>For a full set of fixtures see <a href="@Href( "~/DisplayPage", currentFixtures.Id, currentFixtures.Title )">@currentFixtures.Title</a></p>
}

@if ( lastAverages != null )
{
    <h3>Averages</h3>
    <p>The current averages in the @averagesLeagueName are </p>
    <table>
        <tr>
            <th class="thNotBold">Name</th>
            <th class="thNotBold">Legs</th>
            <th class="thNotBold">Pins</th>
            <th class="thNotBold">Average</th>
        </tr>
        @foreach ( AverageDetails.Average avgData in lastAverages.AverageCollection )
        {
            <tr>
                <td>@db.QueryValue( "SELECT Email FROM UserProfile WHERE UserId=@0", avgData.PlayerId )</td>
                <td>@avgData.Legs</td>
                <td>@avgData.Pins</td>
                <td>@avgData.Avg</td>
            </tr>
        }
    </table>
}

<h3>Team</h3>

<p>The Oddzes are</p>

<table>
    @foreach ( dynamic user in users )
    {
        // Don't list the ANO1, ANO2 ect members
        if ( user.TeamRole != "Spare" )
        {
            <tr>
                @{    // Get the roles associated with this user
                    string[] roles = Roles.GetRolesForUser( user.Email );
                    if ( ( user.TeamRole.Length == 0 ) && ( roles.Length == 0 ) )
                    {
                        <td>@user.FullName (@user.Email)</td>
}
                    else
                    {
                        // This user has either a defined team role or login based role so display them as nice as possible
                        string roleString = "";
                        if ( user.TeamRole.Length > 0 )
                        {
                            roleString += user.TeamRole;
                        }

                        foreach ( string role in roles )
                        {
                            if ( roleString.Length == 0 )
                            {
                                roleString += role;
                            }
                            else
                            {
                                roleString += ", " + role;
                            }
                        }

                        <td>@user.FullName (@user.Email) - @roleString</td>
}
                }
            </tr>}
                    }
</table>

<p>Team members who are also "Scorers" can log in to record the scores for a game</p>
