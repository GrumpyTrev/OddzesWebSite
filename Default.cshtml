@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Home";

    StarterSiteEntities model = new StarterSiteEntities();

    // Determine when the next few games are.
    DateTime timeNow = DateTime.Now.Date;
    IQueryable<Game> games = model.Games.Where( game => game.Date >= timeNow ).OrderBy( game => game.Date).Take( 3 );

	// What was the last game played
	Game lastGame = model.Games.Where( game => ( game.Complete == true) ).OrderByDescending( game => game.Date ).ThenByDescending( game => game.Late).FirstOrDefault();

    // Find the current fixtures
    Document currentFixtures = model.Documents.First( fixture => fixture.Tag == "Fixtures" );

    // Get the last set of averages
    AverageDetails.Averages lastAverages = AverageDetails.Averages.PreviousAverages( Database.Open( "StarterSite" ) );

    // Get the name of league associated with these averages
    string averagesLeagueName = "";
    if ( lastAverages != null )
    {
        int lastAverageGameId = lastAverages.AverageCollection[ 0 ].GameId;

        averagesLeagueName = ( from name in model.Competitions
                               join game in model.Games on name.Id equals game.Competition
                               where game.Id == lastAverageGameId
                               select name ).Single().Name;
    }
}

@functions
{
	//
	// String representation of a leg score
	//
	string GameDateString( DateTime gameDate, bool late )
	{
		int gameDay = gameDate.Day;

		return string.Format( "{0:ddd d}{1} {0:MMM yyyy} {2}", gameDate, ( ( ( gameDay % 10 == 1 ) && ( gameDay != 11 ) ) ? "st" :
					  ( ( gameDay % 10 == 2 ) && ( gameDay != 12 ) ) ? "nd" : ( ( gameDay % 10 == 3 ) && ( gameDay != 13 ) ) ? "rd" : "th" ),
					  ( late == false ? "Early" : "Late" ) );
	}

	//
	// String representation of a leg score
	//
	string GameDateString( DateTime gameDate )
	{
		int gameDay = gameDate.Day;

		return string.Format( "{0:ddd d}{1} {0:MMM yyyy}", gameDate, ( ( ( gameDay % 10 == 1 ) && ( gameDay != 11 ) ) ? "st" :
					  ( ( gameDay % 10 == 2 ) && ( gameDay != 12 ) ) ? "nd" : ( ( gameDay % 10 == 3 ) && ( gameDay != 13 ) ) ? "rd" : "th" ) );
	}

}

@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@Page.Title.</h1>
            </hgroup>
            <p>
                The Oddzes are a skittles team playing in the mens league at the
                <a href="http://www.consticlub.co.uk" title="Chippenham Constitutional Club Website">Chippenham Constitutional Club</a>.<br>
            </p>
        </div>
    </section>
}

<h3>Games</h3>
@if ( games.Count() > 0 )
{
    <table>
        @{  foreach ( Game nextGame in games )
            {
                Competition nextGameLeague = model.Competitions.Where( league => league.Id == nextGame.Competition ).Single();

                <tr>
                    <td class="tdNoPad"><strong>@GameDateString( nextGame.Date, nextGame.Late.GetValueOrDefault() )</strong></td>
                    <td class="tdNoPad">against <a href="@Href( "~/Game", nextGame.Id, nextGameLeague.Matchplay )">@nextGame.Opponents</a></td>
                    <td class="non-mobile tdNoPad">in <a href="@Href( "~/Competition", nextGameLeague.Id, nextGameLeague.Name, nextGameLeague.Matchplay, nextGameLeague.Locked )">@nextGameLeague.Name</a></td>
                </tr>
            }
        }
    </table>
}
else
{
    <p>There are no games scheduled</p>
}

@if ( lastGame != null )
{
	Competition lastGameLeague = model.Competitions.Where( league => league.Id == lastGame.Competition ).Single();
	<p> Last game was against <a href="@Href( "~/Game", lastGame.Id, lastGameLeague.Matchplay )">@lastGame.Opponents</a> on @GameDateString( lastGame.Date )</p>
}

@if ( currentFixtures != null )
{
    <p>For a full set of fixtures see <a href="@Href( "~/DisplayPage", currentFixtures.Id, currentFixtures.Title )">@currentFixtures.Title</a></p>
}

@if ( lastAverages != null )
{
    <h3>Averages</h3>
    <p>The current averages in the @averagesLeagueName are </p>
    <table>
        <tr>
            <th class="thNotBold">Name</th>
            <th class="thNotBold">Legs</th>
            <th class="thNotBold">Pins</th>
            <th class="thNotBold">Average</th>
        </tr>
        @foreach ( AverageDetails.Average avgData in lastAverages.AverageCollection )
        {
            <tr>
                <td>@model.UserProfiles.First( user => user.UserId == avgData.PlayerId ).Email</td>
                <td>@avgData.Legs</td>
                <td>@avgData.Pins</td>
                <td>@avgData.Avg</td>
            </tr>
        }
    </table>
}

<h3>Team</h3>

<p>The Oddzes are</p>

<table>
    @foreach ( UserProfile user in model.UserProfiles )
    {
        // Don't list the ANO1, ANO2 etc members
        if ( user.TeamRole != "Spare" )
        {
            <tr>
                @{ 
                    if ( ( user.TeamRole.Length == 0 ) && ( user.webpages_Roles.Count == 0 ) )
                    {
                        <td>@user.FullName (@user.Email)</td>
                    }
                    else
                    {
                        string roleString = string.Join( ", ", Array.ConvertAll( user.webpages_Roles.ToArray(), x => x.RoleName ) );

                        if ( user.TeamRole.Length > 0 )
                        {
                            roleString = ( roleString.Length > 0 ) ? user.TeamRole + ", " + roleString : user.TeamRole;
                        }

                        <td>@user.FullName (@user.Email) - @roleString</td>
                    }
                }
            </tr>}
    }
</table>

<p>Team members who are also "Scorers" can log in to record the scores for a game</p>
